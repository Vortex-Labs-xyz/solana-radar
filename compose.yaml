services:
  # Kafka for message streaming
  kafka:
    image: bitnami/kafka:3.6
    profiles:
      - ingest
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    ports:
      - "9092:9092"
    volumes:
      - kafka-data:/bitnami/kafka
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server=localhost:9092", "--list"]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - radar-network

  # Redis for caching
  redis:
    image: bitnami/redis:7.2
    profiles:
      - ingest
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/bitnami/redis/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - radar-network

  # Core service placeholder
  radar-core:
    build:
      context: .
      target: production
    profiles:
      - core
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - REDIS_URL=redis://redis:6379
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - radar-network
    restart: unless-stopped

  # Bitquery Kafka consumer
  bitquery-consumer:
    build:
      context: .
      target: production
    profiles:
      - ingest
    command: python -m ingest.bitquery_kafka
    environment:
      - KAFKA_BROKERS=${KAFKA_BROKERS}
      - KAFKA_SASL_USERNAME=${KAFKA_SASL_USERNAME}
      - KAFKA_SASL_PASSWORD=${KAFKA_SASL_PASSWORD}
      - KAFKA_SECURITY_PROTOCOL=${KAFKA_SECURITY_PROTOCOL}
      - KAFKA_SASL_MECHANISM=${KAFKA_SASL_MECHANISM}
      - KAFKA_TOPICS=${KAFKA_TOPICS}
      - KAFKA_GROUP_ID=${KAFKA_GROUP_ID}
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - REDIS_URL=redis://redis:6379
      - METRICS_PORT=8001
      - SSL_KEY_LOCATION=${SSL_KEY_LOCATION:-}
      - SSL_CA_LOCATION=${SSL_CA_LOCATION:-}
      - SSL_CERT_LOCATION=${SSL_CERT_LOCATION:-}
    volumes:
      - ./certs:/etc/bitquery_certs:ro
    ports:
      - "8001:8001"
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - radar-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; sys.exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:v2.48.1
    profiles:
      - monitoring
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    volumes:
      - ./infra/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - radar-network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:10.2.3
    profiles:
      - monitoring
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./infra/monitoring/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./infra/monitoring/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - radar-network
    restart: unless-stopped

volumes:
  kafka-data:
  redis-data:
  prometheus-data:
  grafana-data:

networks:
  radar-network:
    driver: bridge 